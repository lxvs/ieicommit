#!/bin/bash

declare -r template_file_name="ChangeHistoryTemplate.txt"
declare -r fci_file_name="farewell-commit-id"

ShowUsage(){
    echo "
Usage:
    inspurcommit [<option>]

Options:
    amend, export, exportall, template, usage"
}

ValidateTemplate(){
    if [ ! -e $tempFn ]
    then
        echo "inspurcommit: ERROR: Couldn't find template file $tempFn" >&2
        exit 2
    fi
}

ValidateJgn(){
    which $jgn 1>/dev/null 2>&1
    if [ $? -ne 0 ]
    then
        echo "inspurcommit: ERROR: Coundn't find $jgn." >&2
        exit 3
    fi
}

ValidateHistoryField(){
    local value=$(cat $tempFn | grep -P "^$1:" | sed "s/^$1:\s*//")
    [ -z "$value" ] || return 0
    >&2 echo "inspurcommit: ERROR: Field '$1' is empty."
    return 1
}

ValidateHistory(){
    local errors=0
    ValidateHistoryField 'Tag#'
    let errors+=$?
    ValidateHistoryField 'Label#'
    let errors+=$?
    ValidateHistoryField 'Issue#'
    let errors+=$?
    ValidateHistoryField 'Scope'
    let errors+=$?
    ValidateHistoryField 'Severity'
    let errors+=$?
    ValidateHistoryField 'Category'
    let errors+=$?
    ValidateHistoryField 'Symptom'
    let errors+=$?
    ValidateHistoryField 'RootCause'
    let errors+=$?
    ValidateHistoryField 'Solution'
    let errors+=$?
    [ $errors -gt 0 ] || return 0
    >&2 echo
    >&2 echo "inspurcommit: ERROR: Change history is not completed."
    exit 1
}

CheckStage(){
    local diffname=$(git diff --cached --name-only)
    case "$diffname" in
        "")
            >&2 echo "inspurcommit: ERROR: There is no staged changes."
            >&2 echo "Stage changes to be committed with 'git add'."
            exit 1
            ;;
        *"$template_file_name"*)
            [ "$1" == "template" ] && return 0
            git restore --staged "$template_file_name" > /dev/null
            >&2 echo "inspurcommit: Warning: $template_file_name was staged. But was skipped."
            >&2 echo "If you intend to modify the template, use command 'inspurcommit template'."
            CheckStage
            return 1
            ;;
    esac
}

CheckFileAlreadyExists(){
    local filename="$1"
    [ -e $filename ] || return 0
    >&2 echo "inspurcommit: ERROR: File $filename already exists."
    return 1
}

FindFile(){
    local filename="$1"
    [ -e $filename ] && return 0
    >&2 echo "inspurcommit: ERROR: Couldn't find file $filename."
    return 1
}

Commit(){
    ValidateTemplate
    ValidateJgn
    ValidateHistory
    local summary=$(cat $tempFn | grep -P '^Solution:' | sed 's/^Solution:\s*//')
    $jgn > /dev/null 2>&1
    local jgnOutFn=~/NtmOutput.txt
    local details=$(cat $tempFn $jgnOutFn | grep -vP '^#|^\s*$')
    git commit "$@" -m "$summary" -m "$details"
}

declare -r rev='0.0.1'
declare -r lastupdt='2021-07-14'
declare -r author='Johnny Appleseed <liuzhaohui@inspur.com>'
declare -r jgn="jgnumberforthehistory"
declare -r tempFn=$template_file_name

case "${1,,}" in
    "?"|"-?"|"-h"|"--help"|"--usage"|"help"|"usage")
        echo
        echo "    inspurcommit v$rev"
        echo "    Last updated: $lastupdt"
        echo "    $author"
        ShowUsage
        exit
        ;;
    ""|"-"*)
        echo
        CheckStage
        Commit "$@"
        ;;
    "amend")
        echo
        CheckStage
        shift
        Commit --amend "$@"
        ;;
    "export")
        echo
        FindFile "$fci_file_name" || exit
        historyFn=${2:-"./ChangeHistory.txt"}
        CheckFileAlreadyExists "$historyFn" || exit
        git log $(cat $fci_file_name).. --format="%b" | grep -vP '^Scope:' | sed '/^Change-Id:\s\w\{41\}$/,+1d' > $historyFn
        ;;
    "exportall")
        echo
        FindFile "$fci_file_name" || exit
        historyFn=${2:-"./ChangeHistory.txt"}
        CheckFileAlreadyExists "$historyFn" || exit
        git log $(cat $fci_file_name).. --format="%b" | sed '/^Change-Id:\s\w\{41\}$/,+1d' > $historyFn
        ;;
    "template")
        echo
        shift
        CheckStage template
        Commit "$@"
        ;;
    "init")
        echo
        CheckFileAlreadyExists "$fci_file_name" || exit
        git log --format="%H" -1 > "$fci_file_name"
        [ $? == 0 ] && echo "Complete."
        ;;
    *)
        >&2 echo
        >&2 echo "inspurcommit: ERROR: Invalid option - $1"
        >&2 ShowUsage
        exit 1
        ;;
esac
